---
description: 
globs: 
alwaysApply: true
---
프로젝트 요약: 지섭의 포트폴리오 (JISUB's Portfolio)

1. 프로젝트 이름:
지섭의 포트폴리오 (JISUB's Portfolio)

2. 관련 Supabase 스키마:
portfolio

3. 핵심 목적 및 가치 제안:
* 목적: 개발자 JISUB 본인이 직접 참여하고 개발한 다양한 프로젝트들을 전문적으로 전시하고, 기술 역량과 경험을 효과적으로 공유하여 개인 브랜드를 강화하며, 채용 및 협업 기회를 확대하고 기술 지식을 공유함으로써 커뮤니티에 기여합니다.
* 핵심 가치 제안: 신뢰할 수 있는 상세 정보, 뛰어난 기술력의 시각적 증명, 그리고 지속적인 지식 공유를 통해 개발자 JISUB의 전문성을 극대화하고, 방문자에게는 깊이 있는 통찰과 편리한 소통을 제공하는 고품질 인터랙티브 플랫폼입니다. 프로덕션 환경에서는 최신 기술 스택을 활용한 안정적이고 뛰어난 사용자 경험을 제공함으로써 지속 가능한 가치를 창출합니다.

4. 대상 고객:
* 잠재적 고용주/채용 담당자: JISUB의 기술 스택, 프로젝트 경험, 문제 해결 능력을 확인하고 채용 기회를 고려하는 분들. 후보자 역량의 빠르고 정확한 파악을 중시합니다.
* 잠재적 클라이언트/협력 파트너: 웹 개발 프로젝트 의뢰 또는 기술 협력을 원하는 개인 및 기업. 개발자의 신뢰성, 전문성, 프로젝트 성공 가능성을 중점적으로 봅니다.
* 동료 개발자 및 업계 관계자: 기술 교류, 네트워킹, 또는 JISUB의 작업물과 기술적 통찰에 관심 있는 분들. 새로운 기술, 실제 적용 사례, 성장 과정에 관심을 가집니다.

5. 주요 기능 (1차 프로덕션 릴리즈 중점):
* 프로젝트 쇼케이스 (FEAT-PJS): 프로젝트 목록 및 상세 정보 (개요, 역할, 기술, 결과물) 조회.
* 기술 스택 소개 (FEAT-TSK): 보유 기술 및 숙련도/경험 조회.
* 자기소개 (FEAT-ABM): 개발자로서의 여정, 경험, 가치관 등 조회.
* 연락처 (FEAT-CNT): 연락처 정보 조회 및 문의하기 폼 제공/제출.
* 블로그 (FEAT-BLG): 게시물 목록(카테고리 필터링 포함), 상세 내용, 게시물 검색 기능.
* 관리자 기능 (FEAT-ADM): 프로젝트, 기술 스택, 자기소개, 블로그(게시물/카테고리) 정보 CRUD (초기 Supabase Studio 활용 가능).
* 공통 기능: 반응형 디자인(FEAT-COM-RES), 웹 접근성(FEAT-COM-ACC), SEO(FEAT-COM-SEO), 로딩 최적화(FEAT-COM-LOD), 오류 처리(FEAT-COM-ERR), 기본 네비게이션(FEAT-COM-NAV).

6. 기술 스택 요약:
* 프론트엔드:
    * Next.js (App Router, 서버 컴포넌트/클라이언트 컴포넌트 활용)
    * TypeScript (Strict Mode, noImplicitAny, strictNullChecks 등 엄격한 옵션 적용, types/supabase_portfolio.ts 자동 생성 타입 적극 활용)
    * UI 라이브러리: shadcn/ui
    * 스타일링: Tailwind CSS
    * 애니메이션: Framer Motion (제한적, 의미 있는 인터랙션에 사용)
* 상태 관리:
    * Zustand (모듈형 스토어, UI 관련 전역 상태 중심, 가볍고 단순하며 Redux DevTools 지원)
* 폼 처리:
    * React Hook Form (Zod 스키마 연동, 클라이언트/서버 양단 유효성 검증)
* 백엔드/데이터베이스:
    * Supabase (플랫폼)
        * 주요 사용 기능: Authentication (관리자 인증), PostgreSQL Database (portfolio 스키마 활용, RLS 필수 적용), Storage (이미지, 파일 등), Edge Functions (연락처 폼 처리 등 서버리스 로직)
* 테스트:
    * Jest, React Testing Library (단위/통합 테스트)
    * Playwright 또는 Cypress (E2E 테스트 - 1차 릴리즈 후 점진적 도입 권장)
* 배포:
    * Vercel (Next.js 최적화, CI/CD 파이프라인 연동 - GitHub Actions 예시)

7. 전반적인 룩앤필:
모던, 미니멀리스트, 전문적, 깔끔함. 콘텐츠 집중. 일관성, 명확성, 사용자 중심. 기본 라이트 모드, 다크 모드 옵션 제공.

8. 기본 색상 (CSS 변수명):
* --primary: hsl(210, 80%, 50%) (블루 계열)
* --secondary: hsl(210, 15%, 95%)
* --accent: hsl(160, 70%, 45%) (청록 계열)
* --background: hsl(0, 0%, 100%) (라이트) / hsl(220, 18%, 12%) (다크)
* --foreground: hsl(220, 15%, 20%) (라이트) / hsl(210, 15%, 90%) (다크)
* --destructive: hsl(0, 75%, 55%) (레드)
* (기타 색상은 PRD 8.2 참조)

9. 주요 UX 원칙:
* 직관성 및 일관성: 예측 가능한 인터페이스, 일관된 디자인 요소 및 용어 사용.
* 명확한 피드백: 사용자의 모든 행동에 대한 즉각적이고 명확한 시스템 반응.
* 오류 방지 및 효과적인 오류 처리: 사용자 실수 최소화 설계, 오류 발생 시 친절하고 구체적인 안내 및 복구 지원.
* 접근성 (A11y): WCAG 2.1 AA 레벨 준수 목표 (키보드 네비게이션, 스크린리더 호환성, 색상 대비 등).
* 사용자 제어권 및 효율성: 사용자가 작업을 쉽게 취소/수정하고, 최소한의 노력으로 목표를 달성하도록 지원.

10. 주요 기술적 과제 또는 개발 시 주의사항 (오류 예방 및 프로덕션 품질 관점):
* Supabase Row Level Security (RLS) 정책 철저 적용: portfolio 스키마 내 모든 테이블에 대해 RLS 정책을 활성화하고, '최소 권한 원칙'에 따라 상세히 설정해야 합니다. 정책 누락 또는 잘못된 설정은 심각한 데이터 보안 문제로 이어질 수 있습니다. (PRD 6.6, 9.2)
* 타입 안전성 극대화 (types/supabase_portfolio.ts 활용): Supabase 스키마로부터 자동 생성된 TypeScript 타입을 프로젝트 전반(데이터 처리, API, 컴포넌트 Props 등)에 걸쳐 일관되게 사용하여 타입 불일치로 인한 런타임 오류를 원천적으로 방지하고, 데이터 모델 변경에 대한 안정성을 확보해야 합니다. any 타입 사용을 절대적으로 지양합니다. (PRD 6.8, 10.1, 10.2)
* 클라이언트/서버 양단에서의 강력한 입력 유효성 검증: 모든 사용자 입력(특히 연락처 폼)에 대해 React Hook Form과 Zod를 활용한 클라이언트 측 유효성 검사와 더불어, 동일한 Zod 스키마를 재사용하여 서버 측(API Route 또는 Edge Function)에서도 반드시 이중으로 유효성 검사를 수행해야 합니다. 이는 악의적인 요청 및 데이터 오염을 방지하는 데 필수적입니다. (PRD 5.2 - FEAT-CNT-002, 7.1, 9.2)

* 포괄적인 테스트 커버리지 확보 및 CI/CD 연동: 단위/통합 테스트(Jest, RTL)를 통해 주요 로직 및 컴포넌트의 정확성을 검증하고, E2E 테스트(Playwright/Cypress)로 주요 사용자 시나리오의 안정성을 확보해야 합니다. 모든 테스트는 CI/CD 파이프라인에 통합되어 코드 변경 시 자동으로 실행되어야 프로덕션 환경의 품질과 안정성을 지속적으로 유지할 수 있습니다. (PRD 9.10, 7.3)